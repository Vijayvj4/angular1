import { ChangeDetectorRef, Component, ElementRef, Inject, Input, } from '@angular/core';
import { MODULE_CONFIG_TOKEN, } from '../../config/module.config';
import { toCamelCase } from '../../internal/utils/toCamelCase';
import { Icons } from '../../providers/icon.provider';
/**
 * Bootstrap icon component.
 */
export class NgxBootstrapIconsLibComponent {
    constructor(_elem, _changeDetector, _icons, _config) {
        this._elem = _elem;
        this._changeDetector = _changeDetector;
        this._icons = _icons;
        this._config = _config;
        /** Removes default dimensions from svg. */
        this.resetDefaultDimensions = false;
    }
    /**
     * OnChanges event.
     *
     * @param changes SimpleChanges
     */
    ngOnChanges(changes) {
        // icons are provided as an array of objects because of "multi: true"
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const icons = Object.assign({}, ...this._icons);
        let svg = icons[toCamelCase(changes.name.currentValue)] || '';
        if (!svg) {
            console.warn(`Icon not found: ${changes.name.currentValue}\n`);
            return;
        }
        // if config provided
        if (this._config) {
            if (this._config.width) {
                svg = svg.replace('width="16"', `width="${this._config.width}"`);
            }
            if (this._config.height) {
                svg = svg.replace('height="16"', `height="${this._config.height}"`);
            }
            if (this._config.theme) {
                this._elem.nativeElement.classList.add(this._config.theme);
            }
        }
        if (this.resetDefaultDimensions) {
            svg = svg.replace('width="16"', '');
            svg = svg.replace('height="16"', '');
        }
        if (this.width && svg.includes('width')) {
            svg = svg.replace('width="16"', `width="${this.width}"`);
        }
        if (this.height && svg.includes('height')) {
            svg = svg.replace('height="16"', `height="${this.height}"`);
        }
        this._elem.nativeElement.innerHTML = svg;
        this._changeDetector.markForCheck();
    }
}
NgxBootstrapIconsLibComponent.decorators = [
    { type: Component, args: [{
                selector: 'i-bs, *[i-bs]',
                template: '<ng-content></ng-content>'
            },] }
];
NgxBootstrapIconsLibComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MODULE_CONFIG_TOKEN,] }] }
];
NgxBootstrapIconsLibComponent.propDecorators = {
    name: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    resetDefaultDimensions: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJvb3RzdHJhcC1pY29ucy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtYm9vdHN0cmFwLWljb25zLWxpYi9zcmMvbGliL2NvbXBvbmVudHMvbmd4LWJvb3RzdHJhcC1pY29ucy9uZ3gtYm9vdHN0cmFwLWljb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLEtBQUssR0FHTixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBRUwsbUJBQW1CLEdBQ3BCLE1BQU0sNEJBQTRCLENBQUM7QUFFcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUd0RDs7R0FFRztBQUtILE1BQU0sT0FBTyw2QkFBNkI7SUFpQnhDLFlBQ1UsS0FBaUIsRUFDakIsZUFBa0MsRUFDbkIsTUFBYSxFQUNDLE9BQTZCO1FBSDFELFVBQUssR0FBTCxLQUFLLENBQVk7UUFDakIsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBQ25CLFdBQU0sR0FBTixNQUFNLENBQU87UUFDQyxZQUFPLEdBQVAsT0FBTyxDQUFzQjtRQVJwRSwyQ0FBMkM7UUFFcEMsMkJBQXNCLEdBQUcsS0FBSyxDQUFDO0lBT2xDLENBQUM7SUFFTDs7OztPQUlHO0lBQ0ksV0FBVyxDQUFDLE9BQXNCO1FBQ3ZDLHFFQUFxRTtRQUNyRSw4REFBOEQ7UUFDOUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBSSxJQUFJLENBQUMsTUFBMEIsQ0FBQyxDQUFDO1FBQ3JFLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUU5RCxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDO1lBQy9ELE9BQU87U0FDUjtRQUVELHFCQUFxQjtRQUNyQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDdEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtnQkFDdkIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2FBQ3JFO1lBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzVEO1NBQ0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMvQixHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDcEMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDdkMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFVBQVUsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDMUQ7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN6QyxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsV0FBVyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUM3RDtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFDekMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QyxDQUFDOzs7WUF2RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUUsMkJBQTJCO2FBQ3RDOzs7WUF0QkMsVUFBVTtZQUZWLGlCQUFpQjtZQWVWLEtBQUssdUJBOEJULE1BQU0sU0FBQyxLQUFLOzRDQUNaLE1BQU0sU0FBQyxtQkFBbUI7OzttQkFuQjVCLEtBQUs7b0JBSUwsS0FBSztxQkFJTCxLQUFLO3FDQUlMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIEluamVjdCxcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7XHJcbiAgSU1vZHVsZUNvbmZpZ09wdGlvbnMsXHJcbiAgTU9EVUxFX0NPTkZJR19UT0tFTixcclxufSBmcm9tICcuLi8uLi9jb25maWcvbW9kdWxlLmNvbmZpZyc7XHJcbmltcG9ydCB7IEljb25OYW1lc0VudW0gfSBmcm9tICcuLi8uLi9lbnVtcy9pY29uLW5hbWVzLmVudW0nO1xyXG5pbXBvcnQgeyB0b0NhbWVsQ2FzZSB9IGZyb20gJy4uLy4uL2ludGVybmFsL3V0aWxzL3RvQ2FtZWxDYXNlJztcclxuaW1wb3J0IHsgSWNvbnMgfSBmcm9tICcuLi8uLi9wcm92aWRlcnMvaWNvbi5wcm92aWRlcic7XHJcbmltcG9ydCB7IEljb25OYW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMvaWNvbi1uYW1lcy50eXBlJztcclxuXHJcbi8qKlxyXG4gKiBCb290c3RyYXAgaWNvbiBjb21wb25lbnQuXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2ktYnMsICpbaS1ic10nLFxyXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hCb290c3RyYXBJY29uc0xpYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgLyoqIEljb24gbmFtZS4gKi9cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBuYW1lITogc3RyaW5nIHwgSWNvbk5hbWVzRW51bSB8IEljb25OYW1lO1xyXG5cclxuICAvKiogSWNvbiB3aWR0aC4gKi9cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyB3aWR0aCE6IHN0cmluZztcclxuXHJcbiAgLyoqIEljb24gaGVpZ2h0LiAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGhlaWdodCE6IHN0cmluZztcclxuXHJcbiAgLyoqIFJlbW92ZXMgZGVmYXVsdCBkaW1lbnNpb25zIGZyb20gc3ZnLiAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHJlc2V0RGVmYXVsdERpbWVuc2lvbnMgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIF9lbGVtOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgQEluamVjdChJY29ucykgcHJpdmF0ZSBfaWNvbnM6IEljb25zLFxyXG4gICAgQEluamVjdChNT0RVTEVfQ09ORklHX1RPS0VOKSBwcml2YXRlIF9jb25maWc6IElNb2R1bGVDb25maWdPcHRpb25zLFxyXG4gICkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9uQ2hhbmdlcyBldmVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjaGFuZ2VzIFNpbXBsZUNoYW5nZXNcclxuICAgKi9cclxuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgLy8gaWNvbnMgYXJlIHByb3ZpZGVkIGFzIGFuIGFycmF5IG9mIG9iamVjdHMgYmVjYXVzZSBvZiBcIm11bHRpOiB0cnVlXCJcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBjb25zdCBpY29ucyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLih0aGlzLl9pY29ucyBhcyBhbnkgYXMgb2JqZWN0W10pKTtcclxuICAgIGxldCBzdmcgPSBpY29uc1t0b0NhbWVsQ2FzZShjaGFuZ2VzLm5hbWUuY3VycmVudFZhbHVlKV0gfHwgJyc7XHJcblxyXG4gICAgaWYgKCFzdmcpIHtcclxuICAgICAgY29uc29sZS53YXJuKGBJY29uIG5vdCBmb3VuZDogJHtjaGFuZ2VzLm5hbWUuY3VycmVudFZhbHVlfVxcbmApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaWYgY29uZmlnIHByb3ZpZGVkXHJcbiAgICBpZiAodGhpcy5fY29uZmlnKSB7XHJcbiAgICAgIGlmICh0aGlzLl9jb25maWcud2lkdGgpIHtcclxuICAgICAgICBzdmcgPSBzdmcucmVwbGFjZSgnd2lkdGg9XCIxNlwiJywgYHdpZHRoPVwiJHt0aGlzLl9jb25maWcud2lkdGh9XCJgKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmhlaWdodCkge1xyXG4gICAgICAgIHN2ZyA9IHN2Zy5yZXBsYWNlKCdoZWlnaHQ9XCIxNlwiJywgYGhlaWdodD1cIiR7dGhpcy5fY29uZmlnLmhlaWdodH1cImApO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLl9jb25maWcudGhlbWUpIHtcclxuICAgICAgICB0aGlzLl9lbGVtLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcudGhlbWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMucmVzZXREZWZhdWx0RGltZW5zaW9ucykge1xyXG4gICAgICBzdmcgPSBzdmcucmVwbGFjZSgnd2lkdGg9XCIxNlwiJywgJycpO1xyXG4gICAgICBzdmcgPSBzdmcucmVwbGFjZSgnaGVpZ2h0PVwiMTZcIicsICcnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy53aWR0aCAmJiBzdmcuaW5jbHVkZXMoJ3dpZHRoJykpIHtcclxuICAgICAgc3ZnID0gc3ZnLnJlcGxhY2UoJ3dpZHRoPVwiMTZcIicsIGB3aWR0aD1cIiR7dGhpcy53aWR0aH1cImApO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaGVpZ2h0ICYmIHN2Zy5pbmNsdWRlcygnaGVpZ2h0JykpIHtcclxuICAgICAgc3ZnID0gc3ZnLnJlcGxhY2UoJ2hlaWdodD1cIjE2XCInLCBgaGVpZ2h0PVwiJHt0aGlzLmhlaWdodH1cImApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2VsZW0ubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSBzdmc7XHJcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3Rvci5tYXJrRm9yQ2hlY2soKTtcclxuICB9XHJcbn1cclxuIl19